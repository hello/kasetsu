// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: online_hmm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "online_hmm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hello {

namespace {

const ::google::protobuf::Descriptor* RealMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transition_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlphabetHmmPrior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlphabetHmmPrior_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlphabetHmmScratchPad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlphabetHmmScratchPad_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlphabetHmmUserModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlphabetHmmUserModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutputId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_online_5fhmm_2eproto() {
  protobuf_AddDesc_online_5fhmm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "online_hmm.proto");
  GOOGLE_CHECK(file != NULL);
  RealMatrix_descriptor_ = file->message_type(0);
  static const int RealMatrix_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, id_),
  };
  RealMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealMatrix_descriptor_,
      RealMatrix::default_instance_,
      RealMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealMatrix));
  Transition_descriptor_ = file->message_type(1);
  static const int Transition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, output_id_),
  };
  Transition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transition_descriptor_,
      Transition::default_instance_,
      Transition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transition));
  AlphabetHmmPrior_descriptor_ = file->message_type(2);
  static const int AlphabetHmmPrior_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, output_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, date_created_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, date_updated_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, log_state_transition_numerator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, log_observation_model_numerator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, log_observation_model_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, log_denominator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, pi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, end_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, minimum_state_durations_),
  };
  AlphabetHmmPrior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlphabetHmmPrior_descriptor_,
      AlphabetHmmPrior::default_instance_,
      AlphabetHmmPrior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmPrior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlphabetHmmPrior));
  AlphabetHmmScratchPad_descriptor_ = file->message_type(3);
  static const int AlphabetHmmScratchPad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmScratchPad, last_date_updated_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmScratchPad, model_deltas_),
  };
  AlphabetHmmScratchPad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlphabetHmmScratchPad_descriptor_,
      AlphabetHmmScratchPad::default_instance_,
      AlphabetHmmScratchPad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmScratchPad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmScratchPad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlphabetHmmScratchPad));
  AlphabetHmmUserModel_descriptor_ = file->message_type(4);
  static const int AlphabetHmmUserModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmUserModel, models_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmUserModel, forbiddeden_motion_transitions_),
  };
  AlphabetHmmUserModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlphabetHmmUserModel_descriptor_,
      AlphabetHmmUserModel::default_instance_,
      AlphabetHmmUserModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmUserModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlphabetHmmUserModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlphabetHmmUserModel));
  OutputId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_online_5fhmm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealMatrix_descriptor_, &RealMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transition_descriptor_, &Transition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlphabetHmmPrior_descriptor_, &AlphabetHmmPrior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlphabetHmmScratchPad_descriptor_, &AlphabetHmmScratchPad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlphabetHmmUserModel_descriptor_, &AlphabetHmmUserModel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_online_5fhmm_2eproto() {
  delete RealMatrix::default_instance_;
  delete RealMatrix_reflection_;
  delete Transition::default_instance_;
  delete Transition_reflection_;
  delete AlphabetHmmPrior::default_instance_;
  delete AlphabetHmmPrior_reflection_;
  delete AlphabetHmmScratchPad::default_instance_;
  delete AlphabetHmmScratchPad_reflection_;
  delete AlphabetHmmUserModel::default_instance_;
  delete AlphabetHmmUserModel_reflection_;
}

void protobuf_AddDesc_online_5fhmm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020online_hmm.proto\022\005hello\"J\n\nRealMatrix\022"
    "\020\n\010num_rows\030\001 \002(\005\022\020\n\010num_cols\030\002 \002(\005\022\014\n\004d"
    "ata\030\003 \003(\001\022\n\n\002id\030\004 \001(\t\"9\n\nTransition\022\014\n\004f"
    "rom\030\001 \002(\005\022\n\n\002to\030\002 \002(\005\022\021\n\toutput_id\030\003 \001(\t"
    "\"\352\002\n\020AlphabetHmmPrior\022\n\n\002id\030\001 \001(\t\022\"\n\tout"
    "put_id\030\002 \001(\0162\017.hello.OutputId\022\030\n\020date_cr"
    "eated_utc\030\003 \001(\003\022\030\n\020date_updated_utc\030\004 \001("
    "\003\0229\n\036log_state_transition_numerator\030\005 \001("
    "\0132\021.hello.RealMatrix\022:\n\037log_observation_"
    "model_numerator\030\006 \003(\0132\021.hello.RealMatrix"
    "\022!\n\031log_observation_model_ids\030\007 \003(\t\022\027\n\017l"
    "og_denominator\030\010 \003(\001\022\n\n\002pi\030\t \003(\001\022\022\n\nend_"
    "states\030\n \003(\005\022\037\n\027minimum_state_durations\030"
    "\013 \003(\005\"e\n\025AlphabetHmmScratchPad\022\035\n\025last_d"
    "ate_updated_utc\030\001 \001(\003\022-\n\014model_deltas\030\002 "
    "\003(\0132\027.hello.AlphabetHmmPrior\"z\n\024Alphabet"
    "HmmUserModel\022\'\n\006models\030\001 \003(\0132\027.hello.Alp"
    "habetHmmPrior\0229\n\036forbiddeden_motion_tran"
    "sitions\030\002 \003(\0132\021.hello.Transition*\036\n\010Outp"
    "utId\022\t\n\005SLEEP\020\000\022\007\n\003BED\020\001B3\n com.hello.su"
    "ripu.api.datascienceB\017OnlineHmmProtos", 837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "online_hmm.proto", &protobuf_RegisterTypes);
  RealMatrix::default_instance_ = new RealMatrix();
  Transition::default_instance_ = new Transition();
  AlphabetHmmPrior::default_instance_ = new AlphabetHmmPrior();
  AlphabetHmmScratchPad::default_instance_ = new AlphabetHmmScratchPad();
  AlphabetHmmUserModel::default_instance_ = new AlphabetHmmUserModel();
  RealMatrix::default_instance_->InitAsDefaultInstance();
  Transition::default_instance_->InitAsDefaultInstance();
  AlphabetHmmPrior::default_instance_->InitAsDefaultInstance();
  AlphabetHmmScratchPad::default_instance_->InitAsDefaultInstance();
  AlphabetHmmUserModel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_online_5fhmm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_online_5fhmm_2eproto {
  StaticDescriptorInitializer_online_5fhmm_2eproto() {
    protobuf_AddDesc_online_5fhmm_2eproto();
  }
} static_descriptor_initializer_online_5fhmm_2eproto_;
const ::google::protobuf::EnumDescriptor* OutputId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputId_descriptor_;
}
bool OutputId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RealMatrix::kNumRowsFieldNumber;
const int RealMatrix::kNumColsFieldNumber;
const int RealMatrix::kDataFieldNumber;
const int RealMatrix::kIdFieldNumber;
#endif  // !_MSC_VER

RealMatrix::RealMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealMatrix::InitAsDefaultInstance() {
}

RealMatrix::RealMatrix(const RealMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealMatrix::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = 0;
  num_cols_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealMatrix::~RealMatrix() {
  SharedDtor();
}

void RealMatrix::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RealMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealMatrix_descriptor_;
}

const RealMatrix& RealMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_5fhmm_2eproto();
  return *default_instance_;
}

RealMatrix* RealMatrix::default_instance_ = NULL;

RealMatrix* RealMatrix::New() const {
  return new RealMatrix;
}

void RealMatrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = 0;
    num_cols_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));
          set_has_num_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_cols;
        break;
      }

      // required int32 num_cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cols_)));
          set_has_num_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }

      // optional string id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RealMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_rows = 1;
  if (has_num_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_rows(), output);
  }

  // required int32 num_cols = 2;
  if (has_num_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_cols(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_rows = 1;
  if (has_num_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_rows(), target);
  }

  // required int32 num_cols = 2;
  if (has_num_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_cols(), target);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->data(i), target);
  }

  // optional string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_rows = 1;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rows());
    }

    // required int32 num_cols = 2;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_cols());
    }

    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealMatrix::MergeFrom(const RealMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_rows()) {
      set_num_rows(from.num_rows());
    }
    if (from.has_num_cols()) {
      set_num_cols(from.num_cols());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealMatrix::CopyFrom(const RealMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealMatrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RealMatrix::Swap(RealMatrix* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    data_.Swap(&other->data_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealMatrix_descriptor_;
  metadata.reflection = RealMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transition::kFromFieldNumber;
const int Transition::kToFieldNumber;
const int Transition::kOutputIdFieldNumber;
#endif  // !_MSC_VER

Transition::Transition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transition::InitAsDefaultInstance() {
}

Transition::Transition(const Transition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transition::SharedCtor() {
  _cached_size_ = 0;
  from_ = 0;
  to_ = 0;
  output_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transition::~Transition() {
  SharedDtor();
}

void Transition::SharedDtor() {
  if (output_id_ != &::google::protobuf::internal::kEmptyString) {
    delete output_id_;
  }
  if (this != default_instance_) {
  }
}

void Transition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transition_descriptor_;
}

const Transition& Transition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_5fhmm_2eproto();
  return *default_instance_;
}

Transition* Transition::default_instance_ = NULL;

Transition* Transition::New() const {
  return new Transition;
}

void Transition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_ = 0;
    to_ = 0;
    if (has_output_id()) {
      if (output_id_ != &::google::protobuf::internal::kEmptyString) {
        output_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to;
        break;
      }

      // required int32 to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output_id;
        break;
      }

      // optional string output_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output_id().data(), this->output_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from(), output);
  }

  // required int32 to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to(), output);
  }

  // optional string output_id = 3;
  if (has_output_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_id().data(), this->output_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->output_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from(), target);
  }

  // required int32 to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to(), target);
  }

  // optional string output_id = 3;
  if (has_output_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output_id().data(), this->output_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // required int32 to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

    // optional string output_id = 3;
    if (has_output_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transition::MergeFrom(const Transition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_output_id()) {
      set_output_id(from.output_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transition::CopyFrom(const Transition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Transition::Swap(Transition* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(output_id_, other->output_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transition_descriptor_;
  metadata.reflection = Transition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlphabetHmmPrior::kIdFieldNumber;
const int AlphabetHmmPrior::kOutputIdFieldNumber;
const int AlphabetHmmPrior::kDateCreatedUtcFieldNumber;
const int AlphabetHmmPrior::kDateUpdatedUtcFieldNumber;
const int AlphabetHmmPrior::kLogStateTransitionNumeratorFieldNumber;
const int AlphabetHmmPrior::kLogObservationModelNumeratorFieldNumber;
const int AlphabetHmmPrior::kLogObservationModelIdsFieldNumber;
const int AlphabetHmmPrior::kLogDenominatorFieldNumber;
const int AlphabetHmmPrior::kPiFieldNumber;
const int AlphabetHmmPrior::kEndStatesFieldNumber;
const int AlphabetHmmPrior::kMinimumStateDurationsFieldNumber;
#endif  // !_MSC_VER

AlphabetHmmPrior::AlphabetHmmPrior()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlphabetHmmPrior::InitAsDefaultInstance() {
  log_state_transition_numerator_ = const_cast< ::hello::RealMatrix*>(&::hello::RealMatrix::default_instance());
}

AlphabetHmmPrior::AlphabetHmmPrior(const AlphabetHmmPrior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlphabetHmmPrior::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  output_id_ = 0;
  date_created_utc_ = GOOGLE_LONGLONG(0);
  date_updated_utc_ = GOOGLE_LONGLONG(0);
  log_state_transition_numerator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlphabetHmmPrior::~AlphabetHmmPrior() {
  SharedDtor();
}

void AlphabetHmmPrior::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete log_state_transition_numerator_;
  }
}

void AlphabetHmmPrior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlphabetHmmPrior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlphabetHmmPrior_descriptor_;
}

const AlphabetHmmPrior& AlphabetHmmPrior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_5fhmm_2eproto();
  return *default_instance_;
}

AlphabetHmmPrior* AlphabetHmmPrior::default_instance_ = NULL;

AlphabetHmmPrior* AlphabetHmmPrior::New() const {
  return new AlphabetHmmPrior;
}

void AlphabetHmmPrior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    output_id_ = 0;
    date_created_utc_ = GOOGLE_LONGLONG(0);
    date_updated_utc_ = GOOGLE_LONGLONG(0);
    if (has_log_state_transition_numerator()) {
      if (log_state_transition_numerator_ != NULL) log_state_transition_numerator_->::hello::RealMatrix::Clear();
    }
  }
  log_observation_model_numerator_.Clear();
  log_observation_model_ids_.Clear();
  log_denominator_.Clear();
  pi_.Clear();
  end_states_.Clear();
  minimum_state_durations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlphabetHmmPrior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_output_id;
        break;
      }

      // optional .hello.OutputId output_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hello::OutputId_IsValid(value)) {
            set_output_id(static_cast< ::hello::OutputId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date_created_utc;
        break;
      }

      // optional int64 date_created_utc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_created_utc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_created_utc_)));
          set_has_date_created_utc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date_updated_utc;
        break;
      }

      // optional int64 date_updated_utc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_updated_utc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_updated_utc_)));
          set_has_date_updated_utc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_log_state_transition_numerator;
        break;
      }

      // optional .hello.RealMatrix log_state_transition_numerator = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_state_transition_numerator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_state_transition_numerator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_log_observation_model_numerator;
        break;
      }

      // repeated .hello.RealMatrix log_observation_model_numerator = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_observation_model_numerator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_observation_model_numerator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_log_observation_model_numerator;
        if (input->ExpectTag(58)) goto parse_log_observation_model_ids;
        break;
      }

      // repeated string log_observation_model_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_observation_model_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_log_observation_model_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_observation_model_ids(this->log_observation_model_ids_size() - 1).data(),
            this->log_observation_model_ids(this->log_observation_model_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_log_observation_model_ids;
        if (input->ExpectTag(65)) goto parse_log_denominator;
        break;
      }

      // repeated double log_denominator = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_log_denominator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_log_denominator())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_log_denominator())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_log_denominator;
        if (input->ExpectTag(73)) goto parse_pi;
        break;
      }

      // repeated double pi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_pi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_pi;
        if (input->ExpectTag(80)) goto parse_end_states;
        break;
      }

      // repeated int32 end_states = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_end_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_end_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_end_states;
        if (input->ExpectTag(88)) goto parse_minimum_state_durations;
        break;
      }

      // repeated int32 minimum_state_durations = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimum_state_durations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_minimum_state_durations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minimum_state_durations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_minimum_state_durations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlphabetHmmPrior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .hello.OutputId output_id = 2;
  if (has_output_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->output_id(), output);
  }

  // optional int64 date_created_utc = 3;
  if (has_date_created_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->date_created_utc(), output);
  }

  // optional int64 date_updated_utc = 4;
  if (has_date_updated_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->date_updated_utc(), output);
  }

  // optional .hello.RealMatrix log_state_transition_numerator = 5;
  if (has_log_state_transition_numerator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->log_state_transition_numerator(), output);
  }

  // repeated .hello.RealMatrix log_observation_model_numerator = 6;
  for (int i = 0; i < this->log_observation_model_numerator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->log_observation_model_numerator(i), output);
  }

  // repeated string log_observation_model_ids = 7;
  for (int i = 0; i < this->log_observation_model_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->log_observation_model_ids(i).data(), this->log_observation_model_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->log_observation_model_ids(i), output);
  }

  // repeated double log_denominator = 8;
  for (int i = 0; i < this->log_denominator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->log_denominator(i), output);
  }

  // repeated double pi = 9;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->pi(i), output);
  }

  // repeated int32 end_states = 10;
  for (int i = 0; i < this->end_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->end_states(i), output);
  }

  // repeated int32 minimum_state_durations = 11;
  for (int i = 0; i < this->minimum_state_durations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->minimum_state_durations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlphabetHmmPrior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .hello.OutputId output_id = 2;
  if (has_output_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->output_id(), target);
  }

  // optional int64 date_created_utc = 3;
  if (has_date_created_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->date_created_utc(), target);
  }

  // optional int64 date_updated_utc = 4;
  if (has_date_updated_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->date_updated_utc(), target);
  }

  // optional .hello.RealMatrix log_state_transition_numerator = 5;
  if (has_log_state_transition_numerator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->log_state_transition_numerator(), target);
  }

  // repeated .hello.RealMatrix log_observation_model_numerator = 6;
  for (int i = 0; i < this->log_observation_model_numerator_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->log_observation_model_numerator(i), target);
  }

  // repeated string log_observation_model_ids = 7;
  for (int i = 0; i < this->log_observation_model_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_observation_model_ids(i).data(), this->log_observation_model_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->log_observation_model_ids(i), target);
  }

  // repeated double log_denominator = 8;
  for (int i = 0; i < this->log_denominator_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->log_denominator(i), target);
  }

  // repeated double pi = 9;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->pi(i), target);
  }

  // repeated int32 end_states = 10;
  for (int i = 0; i < this->end_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->end_states(i), target);
  }

  // repeated int32 minimum_state_durations = 11;
  for (int i = 0; i < this->minimum_state_durations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->minimum_state_durations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlphabetHmmPrior::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .hello.OutputId output_id = 2;
    if (has_output_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_id());
    }

    // optional int64 date_created_utc = 3;
    if (has_date_created_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_created_utc());
    }

    // optional int64 date_updated_utc = 4;
    if (has_date_updated_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_updated_utc());
    }

    // optional .hello.RealMatrix log_state_transition_numerator = 5;
    if (has_log_state_transition_numerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_state_transition_numerator());
    }

  }
  // repeated .hello.RealMatrix log_observation_model_numerator = 6;
  total_size += 1 * this->log_observation_model_numerator_size();
  for (int i = 0; i < this->log_observation_model_numerator_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_observation_model_numerator(i));
  }

  // repeated string log_observation_model_ids = 7;
  total_size += 1 * this->log_observation_model_ids_size();
  for (int i = 0; i < this->log_observation_model_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->log_observation_model_ids(i));
  }

  // repeated double log_denominator = 8;
  {
    int data_size = 0;
    data_size = 8 * this->log_denominator_size();
    total_size += 1 * this->log_denominator_size() + data_size;
  }

  // repeated double pi = 9;
  {
    int data_size = 0;
    data_size = 8 * this->pi_size();
    total_size += 1 * this->pi_size() + data_size;
  }

  // repeated int32 end_states = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->end_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->end_states(i));
    }
    total_size += 1 * this->end_states_size() + data_size;
  }

  // repeated int32 minimum_state_durations = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->minimum_state_durations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minimum_state_durations(i));
    }
    total_size += 1 * this->minimum_state_durations_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlphabetHmmPrior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlphabetHmmPrior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlphabetHmmPrior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlphabetHmmPrior::MergeFrom(const AlphabetHmmPrior& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_observation_model_numerator_.MergeFrom(from.log_observation_model_numerator_);
  log_observation_model_ids_.MergeFrom(from.log_observation_model_ids_);
  log_denominator_.MergeFrom(from.log_denominator_);
  pi_.MergeFrom(from.pi_);
  end_states_.MergeFrom(from.end_states_);
  minimum_state_durations_.MergeFrom(from.minimum_state_durations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_output_id()) {
      set_output_id(from.output_id());
    }
    if (from.has_date_created_utc()) {
      set_date_created_utc(from.date_created_utc());
    }
    if (from.has_date_updated_utc()) {
      set_date_updated_utc(from.date_updated_utc());
    }
    if (from.has_log_state_transition_numerator()) {
      mutable_log_state_transition_numerator()->::hello::RealMatrix::MergeFrom(from.log_state_transition_numerator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlphabetHmmPrior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlphabetHmmPrior::CopyFrom(const AlphabetHmmPrior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphabetHmmPrior::IsInitialized() const {

  if (has_log_state_transition_numerator()) {
    if (!this->log_state_transition_numerator().IsInitialized()) return false;
  }
  for (int i = 0; i < log_observation_model_numerator_size(); i++) {
    if (!this->log_observation_model_numerator(i).IsInitialized()) return false;
  }
  return true;
}

void AlphabetHmmPrior::Swap(AlphabetHmmPrior* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(output_id_, other->output_id_);
    std::swap(date_created_utc_, other->date_created_utc_);
    std::swap(date_updated_utc_, other->date_updated_utc_);
    std::swap(log_state_transition_numerator_, other->log_state_transition_numerator_);
    log_observation_model_numerator_.Swap(&other->log_observation_model_numerator_);
    log_observation_model_ids_.Swap(&other->log_observation_model_ids_);
    log_denominator_.Swap(&other->log_denominator_);
    pi_.Swap(&other->pi_);
    end_states_.Swap(&other->end_states_);
    minimum_state_durations_.Swap(&other->minimum_state_durations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlphabetHmmPrior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlphabetHmmPrior_descriptor_;
  metadata.reflection = AlphabetHmmPrior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlphabetHmmScratchPad::kLastDateUpdatedUtcFieldNumber;
const int AlphabetHmmScratchPad::kModelDeltasFieldNumber;
#endif  // !_MSC_VER

AlphabetHmmScratchPad::AlphabetHmmScratchPad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlphabetHmmScratchPad::InitAsDefaultInstance() {
}

AlphabetHmmScratchPad::AlphabetHmmScratchPad(const AlphabetHmmScratchPad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlphabetHmmScratchPad::SharedCtor() {
  _cached_size_ = 0;
  last_date_updated_utc_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlphabetHmmScratchPad::~AlphabetHmmScratchPad() {
  SharedDtor();
}

void AlphabetHmmScratchPad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlphabetHmmScratchPad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlphabetHmmScratchPad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlphabetHmmScratchPad_descriptor_;
}

const AlphabetHmmScratchPad& AlphabetHmmScratchPad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_5fhmm_2eproto();
  return *default_instance_;
}

AlphabetHmmScratchPad* AlphabetHmmScratchPad::default_instance_ = NULL;

AlphabetHmmScratchPad* AlphabetHmmScratchPad::New() const {
  return new AlphabetHmmScratchPad;
}

void AlphabetHmmScratchPad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_date_updated_utc_ = GOOGLE_LONGLONG(0);
  }
  model_deltas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlphabetHmmScratchPad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_date_updated_utc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_date_updated_utc_)));
          set_has_last_date_updated_utc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_deltas;
        break;
      }

      // repeated .hello.AlphabetHmmPrior model_deltas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_deltas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model_deltas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_deltas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlphabetHmmScratchPad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 last_date_updated_utc = 1;
  if (has_last_date_updated_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_date_updated_utc(), output);
  }

  // repeated .hello.AlphabetHmmPrior model_deltas = 2;
  for (int i = 0; i < this->model_deltas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->model_deltas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlphabetHmmScratchPad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 last_date_updated_utc = 1;
  if (has_last_date_updated_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_date_updated_utc(), target);
  }

  // repeated .hello.AlphabetHmmPrior model_deltas = 2;
  for (int i = 0; i < this->model_deltas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->model_deltas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlphabetHmmScratchPad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_date_updated_utc = 1;
    if (has_last_date_updated_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_date_updated_utc());
    }

  }
  // repeated .hello.AlphabetHmmPrior model_deltas = 2;
  total_size += 1 * this->model_deltas_size();
  for (int i = 0; i < this->model_deltas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model_deltas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlphabetHmmScratchPad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlphabetHmmScratchPad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlphabetHmmScratchPad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlphabetHmmScratchPad::MergeFrom(const AlphabetHmmScratchPad& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_deltas_.MergeFrom(from.model_deltas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_date_updated_utc()) {
      set_last_date_updated_utc(from.last_date_updated_utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlphabetHmmScratchPad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlphabetHmmScratchPad::CopyFrom(const AlphabetHmmScratchPad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphabetHmmScratchPad::IsInitialized() const {

  for (int i = 0; i < model_deltas_size(); i++) {
    if (!this->model_deltas(i).IsInitialized()) return false;
  }
  return true;
}

void AlphabetHmmScratchPad::Swap(AlphabetHmmScratchPad* other) {
  if (other != this) {
    std::swap(last_date_updated_utc_, other->last_date_updated_utc_);
    model_deltas_.Swap(&other->model_deltas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlphabetHmmScratchPad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlphabetHmmScratchPad_descriptor_;
  metadata.reflection = AlphabetHmmScratchPad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlphabetHmmUserModel::kModelsFieldNumber;
const int AlphabetHmmUserModel::kForbiddedenMotionTransitionsFieldNumber;
#endif  // !_MSC_VER

AlphabetHmmUserModel::AlphabetHmmUserModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlphabetHmmUserModel::InitAsDefaultInstance() {
}

AlphabetHmmUserModel::AlphabetHmmUserModel(const AlphabetHmmUserModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlphabetHmmUserModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlphabetHmmUserModel::~AlphabetHmmUserModel() {
  SharedDtor();
}

void AlphabetHmmUserModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlphabetHmmUserModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlphabetHmmUserModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlphabetHmmUserModel_descriptor_;
}

const AlphabetHmmUserModel& AlphabetHmmUserModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_5fhmm_2eproto();
  return *default_instance_;
}

AlphabetHmmUserModel* AlphabetHmmUserModel::default_instance_ = NULL;

AlphabetHmmUserModel* AlphabetHmmUserModel::New() const {
  return new AlphabetHmmUserModel;
}

void AlphabetHmmUserModel::Clear() {
  models_.Clear();
  forbiddeden_motion_transitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlphabetHmmUserModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hello.AlphabetHmmPrior models = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_models:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_models()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_models;
        if (input->ExpectTag(18)) goto parse_forbiddeden_motion_transitions;
        break;
      }

      // repeated .hello.Transition forbiddeden_motion_transitions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forbiddeden_motion_transitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forbiddeden_motion_transitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forbiddeden_motion_transitions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlphabetHmmUserModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hello.AlphabetHmmPrior models = 1;
  for (int i = 0; i < this->models_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->models(i), output);
  }

  // repeated .hello.Transition forbiddeden_motion_transitions = 2;
  for (int i = 0; i < this->forbiddeden_motion_transitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forbiddeden_motion_transitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlphabetHmmUserModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .hello.AlphabetHmmPrior models = 1;
  for (int i = 0; i < this->models_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->models(i), target);
  }

  // repeated .hello.Transition forbiddeden_motion_transitions = 2;
  for (int i = 0; i < this->forbiddeden_motion_transitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forbiddeden_motion_transitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlphabetHmmUserModel::ByteSize() const {
  int total_size = 0;

  // repeated .hello.AlphabetHmmPrior models = 1;
  total_size += 1 * this->models_size();
  for (int i = 0; i < this->models_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->models(i));
  }

  // repeated .hello.Transition forbiddeden_motion_transitions = 2;
  total_size += 1 * this->forbiddeden_motion_transitions_size();
  for (int i = 0; i < this->forbiddeden_motion_transitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forbiddeden_motion_transitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlphabetHmmUserModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlphabetHmmUserModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlphabetHmmUserModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlphabetHmmUserModel::MergeFrom(const AlphabetHmmUserModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  models_.MergeFrom(from.models_);
  forbiddeden_motion_transitions_.MergeFrom(from.forbiddeden_motion_transitions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlphabetHmmUserModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlphabetHmmUserModel::CopyFrom(const AlphabetHmmUserModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphabetHmmUserModel::IsInitialized() const {

  for (int i = 0; i < models_size(); i++) {
    if (!this->models(i).IsInitialized()) return false;
  }
  for (int i = 0; i < forbiddeden_motion_transitions_size(); i++) {
    if (!this->forbiddeden_motion_transitions(i).IsInitialized()) return false;
  }
  return true;
}

void AlphabetHmmUserModel::Swap(AlphabetHmmUserModel* other) {
  if (other != this) {
    models_.Swap(&other->models_);
    forbiddeden_motion_transitions_.Swap(&other->forbiddeden_motion_transitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlphabetHmmUserModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlphabetHmmUserModel_descriptor_;
  metadata.reflection = AlphabetHmmUserModel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

// @@protoc_insertion_point(global_scope)
