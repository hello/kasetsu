#!/usr/bin/python

import datetime
import requests
import time
import json
import os
import csv

k_uri = 'https://research-api-benjo.hello.is/v1/prediction/label_states/{}'
k_magic_auth=os.environ['RESEARCH_TOKEN']
k_params = {'oldest_date_to_consider' : 1433116800000}
def get_time_as_string(timestamp,offset):
    t = datetime.datetime.utcfromtimestamp(( offset + timestamp)/1000)
    return t.strftime('%Y-%m-%d %H:%M:%S')

num_days = 1

prior_meas = 10


k_users = [22531, 28676, 30727, 22538, 30731, 22542, 31056, 26640, 30737, 30738, 28692, 22551, 30744, 30746, 20404, 30750, 17413, 22560, 30754, 31409, 22573, 30766, 30773, 30774, 20535, 26683, 24642, 23222, 18505, 30794, 28749, 16465, 24658, 30734, 27322, 20575, 28769, 26722, 20579, 20583, 20587, 24594, 22640, 26738, 24255, 30847, 26752, 24709, 20614, 24711, 20619, 22668, 22674, 26774, 24732, 30879, 22896, 28835, 18602, 30892, 30893, 30897, 25971, 30902, 28858, 20667, 30909, 22729, 26827, 30924, 20686, 24784, 30929, 20693, 26839, 30937, 30938, 22748, 26849, 28901, 30951, 24811, 28913, 28915, 30964, 21783, 20729, 24829, 30976, 25111, 30980, 20741, 25985, 30984, 30985, 30986, 26893, 24621, 30993, 26901, 24281, 22808, 23940, 22811, 31005, 22817, 28969, 20781, 28980, 28981, 31030, 24969, 31032, 26942, 20802, 21558, 31048, 29002, 31799, 29004, 22862, 18768, 31061, 22871, 31065, 31586, 28389, 16738, 20835, 31076, 31077, 20808, 31084, 18224, 31088, 24952, 27006, 27010, 31107, 29065, 24971, 20879, 24976, 29073, 24978, 31127, 27034, 31131, 20892, 28741, 31136, 20897, 29091, 31141, 27046, 26351, 27052, 31149, 27055, 27056, 22962, 31155, 26014, 29769, 29123, 29124, 22984, 31177, 31178, 31188, 25046, 20406, 31192, 31823, 31196, 20957, 31199, 17488, 16871, 31208, 30120, 23028, 17270, 29179, 26026, 16894, 20994, 29187, 20996, 31237, 18430, 31242, 23053, 31246, 23055, 31250, 27155, 23061, 23063, 21017, 31258, 23068, 21023, 25120, 15451, 25124, 23077, 18982, 29225, 23083, 31276, 31277, 21038, 16948, 29237, 21046, 23096, 23097, 16954, 30815, 27196, 25153, 23107, 21060, 30817, 23113, 31307, 23116, 29821, 25168, 21075, 25172, 27221, 25176, 23133, 31327, 31329, 31330, 29292, 31343, 1129, 21113, 19068, 31357, 29310, 31362, 31363, 21125, 21126, 31367, 23176, 22526, 32194, 17038, 27281, 25235, 21150, 31392, 31395, 31403, 19116, 30834, 21168, 21169, 31410, 21171, 29364, 29365, 27318, 27320, 23226, 22986, 1141, 21187, 21190, 31433, 31434, 22306, 21198, 23249, 31442, 31443, 21208, 29818, 31454, 17123, 17124, 29413, 31462, 31469, 27374, 21231, 27377, 27387, 21290, 25342, 29824, 27395, 19205, 31500, 23341, 31505, 19219, 31510, 23319, 27418, 27420, 23400, 21281, 31524, 31526, 26417, 21289, 17194, 16519, 23340, 29485, 27438, 27439, 29488, 27442, 21300, 21302, 31543, 31545, 31551, 21312, 17547, 31556, 29511, 21323, 31564, 21986, 23374, 25425, 25426, 25428, 25401, 31576, 25435, 31581, 31582, 29536, 23393, 27490, 25444, 31589, 31889, 17256, 23401, 27501, 27504, 19313, 25462, 29559, 25407, 31613, 27518, 31536, 29568, 29570, 31619, 29572, 23429, 18241, 29576, 19340, 29583, 19345, 29586, 23445, 29590, 31639, 31647, 27991, 30876, 29610, 29611, 27567, 25522, 29619, 31670, 31220, 17339, 29631, 23490, 31683, 24054, 31687, 31688, 17911, 25549, 31699, 29653, 29655, 31704, 29657, 30543, 29660, 21469, 31471, 21472, 26448, 20987, 31716, 20305, 27624, 1006, 17391, 27636, 31230, 29687, 29689, 23546, 31741, 27649, 31746, 29700, 23557, 19462, 19463, 17239, 29186, 29710, 25617, 17426, 28163, 31764, 29718, 31768, 31770, 29871, 26458, 27681, 21339, 29732, 17450, 25643, 23600, 29747, 23604, 29750, 17463, 31801, 21562, 21570, 26123, 29764, 31813, 29766, 31816, 19529, 21579, 19298, 27727, 29776, 19511, 27730, 29779, 25685, 29783, 29784, 25691, 21597, 15465, 30567, 19304, 29811, 29813, 31817, 1143, 31866, 1147, 25725, 23680, 21633, 29827, 29829, 21638, 29832, 29833, 21643, 23746, 23694, 29840, 23697, 29844, 21653, 29846, 29850, 29853, 23749, 23712, 29857, 29858, 17606, 17575, 19625, 29868, 17582, 25775, 29872, 29874, 15539, 31924, 30921, 29881, 27835, 29886, 23743, 28192, 25794, 23747, 29892, 21701, 21702, 31607, 27852, 21709, 31949, 23760, 21714, 29219, 31956, 31268, 27870, 29920, 26832, 29922, 16934, 31975, 27882, 27883, 25836, 31981, 27517, 29939, 21374, 27895, 27896, 29945, 23803, 29951, 23810, 17667, 23812, 21769, 15626, 21378, 23427, 29972, 32021, 29974, 24793, 21786, 29981, 32030, 1311, 29984, 32034, 21795, 29988, 23845, 21798, 29991, 23848, 32044, 32045, 30001, 17714, 28211, 21812, 17717, 27959, 23868, 30014, 30016, 30018, 16950, 21831, 31824, 30032, 30033, 15699, 21847, 31290, 27999, 29243, 28006, 23913, 23916, 30061, 30062, 32112, 30067, 32116, 23927, 25976, 25977, 30074, 15594, 23936, 30081, 32131, 21892, 25989, 30089, 23947, 30092, 27885, 28058, 30110, 30111, 15517, 15777, 15779, 32166, 26024, 21929, 30122, 26028, 21933, 26030, 26184, 32179, 32180, 23455, 30140, 32189, 30142, 30144, 29714, 24006, 21962, 31991, 32209, 30533, 32220, 28125, 24034, 24533, 28132, 19942, 20577, 30188, 32237, 26095, 28144, 22001, 26098, 26102, 26103, 30125, 28154, 28156, 30209, 22018, 26115, 30213, 26119, 32266, 30219, 24080, 30227, 16214, 24094, 20000, 28199, 30253, 32302, 31325, 30256, 20744, 30259, 15924, 26889, 30265, 32314, 22077, 30272, 28229, 30278, 22087, 30280, 32329, 30286, 32336, 30648, 22115, 20068, 24155, 32354, 19387, 18020, 24167, 22124, 32366, 18032, 22133, 30326, 26231, 21673, 32380, 18049, 32393, 15536, 32396, 30352, 32402, 16021, 22166, 26264, 32409, 28315, 18076, 26270, 22177, 26274, 26276, 20447, 22183, 30376, 31563, 20379, 20141, 32029, 30386, 26292, 30389, 30392, 30395, 31913, 21561, 28354, 29643, 17311, 26311, 18120, 28361, 28363, 26316, 29986, 28367, 30416, 30420, 30422, 30329, 30425, 30427, 31292, 26336, 23846, 21117, 24304, 25555, 20216, 30462, 16127, 18177, 30466, 27193, 27607, 23621, 24335, 30482, 24406, 30488, 29899, 22305, 18210, 28451, 30500, 30002, 22318, 28464, 28465, 26418, 26421, 30518, 29931, 26424, 23860, 29663, 22334, 30005, 30528, 26433, 30530, 31159, 25908, 26249, 26443, 30542, 26447, 30544, 30545, 26450, 31715, 28502, 20311, 31273, 28505, 22362, 20316, 30557, 24414, 22375, 30574, 29672, 24435, 28535, 30586, 18301, 30590, 22399, 30594, 30596, 26502, 25582, 26522, 16283, 30021, 30624, 22171, 30412, 21683, 32071, 24494, 28593, 26548, 24222, 28598, 26552, 29684, 22858, 22462, 30072, 20423, 24520, 30665, 30672, 20990, 24276, 26581, 30678, 24228, 22491, 26936, 30688, 31096, 30690, 29664, 31028, 24552, 28649, 30699, 28655, 30704, 22514, 30718, 30715, 30717, 20478]
#k_users = [20535, 28676, 30727, 22538, 30731, 22542, 31056, 26640, 30737, 30738, 28692, 22551]
#k_users = [20535]
#k_users = [28211]

def pull_label_for_user(userid):
    headers = {'Authorization' : 'Bearer %s' % k_magic_auth}
    url = k_uri.format(userid)

    response = requests.get(url,params=k_params,headers = headers)

    if response.ok:
        data = response.json()

        if isinstance(data, dict) and data.has_key('code') and int(data['code']) == 204:
            print data['message']
            return None


        if isinstance(data,list):
            print 'user %d got %d labels' % (int(userid),len(data))
            return data

    else:
        print 'fail with %d on %s ' % (response.status_code,datestring)

    return None
    

def increment_label(q):

    p = q[0]
    n = q[1]

    
    if p == None:
        return (1.0,1)
    
    nt = p * n

    nt += 1.0
    n += 1

    p = nt / n

    return (p,n)

def decrement_label(q):
    p = q[0]
    n = q[1]

    if p == None:
        return (0.0,1)

    nt = p * n
    
    n += 1

    p = nt / n

    return (p,n)

def process_labels(labels):
    model_dict = {}

    for label in labels:
        model = label['model']
        labelnumber = label['label']
        statenumber = label['state']
        
        if not model_dict.has_key(model):
            model_dict[model] = {}

        if not model_dict[model].has_key(statenumber):
            model_dict[model][statenumber] = (0.5,prior_meas)


        q = model_dict[model][statenumber]
        
        if labelnumber == 0:
            model_dict[model][statenumber] = decrement_label(q)
        elif labelnumber == 1:
            model_dict[model][statenumber] = increment_label(q)


    return model_dict

                   
if __name__ == '__main__':
    csvfile = open('hmm_labels.csv', 'w')
    fieldnames = ['model', 'label','state','id']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    labels = []
    for iuser in range(len(k_users)):
        user = k_users[iuser]

        percentage_complete = iuser * 100 / len(k_users)

        print '%d%%' % percentage_complete,
        
        resp = pull_label_for_user(user)

        for row in resp:
            writer.writerow(row)
            
        if resp != None:
            labels.extend(resp)
            
    csvfile.close()
    
    model_dict = process_labels(labels)
    print model_dict


